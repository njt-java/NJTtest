package decorator;
/**
 * 设计模式：装饰器模式：
 * 允许向一个现有的对象添加新的功能，同时又不改变其结构。
 * 这种模式创建了一个装饰类，用来包装原有的类，
 * 并在保持类方法签名完整性的前提下，提供了额外的功能。主
 * 要解决由于类的功能扩展导致的子类膨胀问题。
 * 装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。
 *
 * 一个接口         --------------（实现）  一个实现类；
 * 一个实现相同接口包含实现类的抽象类  ---- (继承)  一个抽象类的实现类(实现拓展功能）；
 */
public interface Shape {
    void draw();
}
